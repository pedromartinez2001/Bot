/** 
* NO TOCAR ESTE ARCHIVO: Es generado automaticamente, si sabes lo que haces adelante ;)
* de lo contrario mejor ir a la documentacion o al servidor de discord link.codigoencasa.com/DISCORD
*/
'use strict';

var require$$0 = require('mongodb');

const { MongoClient } = require$$0;

class MongoAdapter {
    db
    listHistory = []
    credentials = { dbUri: null, dbName: null }
    constructor(_credentials) {
        this.credentials = _credentials;
        this.init().then();
    }

    init = async () => {
        try {
            const client = new MongoClient(this.credentials.dbUri, {});
            await client.connect();
            console.log('🆗 Conexión Correcta DB');
            const db = client.db(this.credentials.dbName);
            this.db = db;
            return true
        } catch (e) {
            console.log('Error', e);
            return
        }
    }

    // Guardar una orden en la colección 'orders'
    saveOrder = async (order) => {
        const { name, phone, delivery, location, items } = order;

        // Validación básica
        if (!name || !phone || typeof delivery === 'undefined' || !Array.isArray(items)) {
            throw new Error("Faltan datos obligatorios o son incorrectos.");
        }

        if (delivery && !location) {
            throw new Error("La ubicación es obligatoria para órdenes de delivery.");
        }

        // Estructura de la orden
        const orderToSave = {
            name,
            phone,
            delivery,
            location,
            items,
            createdAt: new Date()
        };

        try {
            const result = await this.db.collection('orders').insertOne(orderToSave);
            console.log("✅ Orden guardada:", result.insertedId);
            return result.insertedId;
        } catch (err) {
            console.error("❌ Error al guardar la orden:", err.message);
            throw err;
        }
    };

    // Obtener todas las órdenes
    getOrders = async () => {
        try {
            const orders = await this.db.collection('orders').find().toArray();
            return orders;
        } catch (err) {
            console.error("❌ Error al obtener órdenes:", err.message);
            throw err;
        }
    };

    // Obtener una orden por ID
    getOrderById = async (orderId) => {
        try {
            const order = await this.db.collection('orders').findOne({ _id: require('mongodb').ObjectId(orderId) });
            if (!order) throw new Error("Orden no encontrada.");
            return order;
        } catch (err) {
            console.error("❌ Error al obtener la orden:", err.message);
            throw err;
        }
    };

    getPrevByNumber = async (from) => {
        const result = await this.db.collection('history').find({ from }).sort({ _id: -1 }).limit(1).toArray();
        return result[0]
    }

    save = async (ctx) => {
        const ctxWithDate = {
            ...ctx,
            date: new Date(),
        };
        await this.db.collection('history').insertOne(ctxWithDate);

        this.listHistory.push(ctx);
    }
}

var mongo = MongoAdapter;

module.exports = mongo;
